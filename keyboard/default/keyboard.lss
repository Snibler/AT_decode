
AVRASM ver. 2.1.52  G:\Atmel\Projects\Keyboard\keyboard\keyboard\keyboard.asm Mon Feb 26 10:46:52 2018

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.64\AvrAssembler/Include\tn2313def.inc'
G:\Atmel\Projects\Keyboard\keyboard\keyboard\keyboard.asm(28): Including file 'C:\Program Files (x86)\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.64\AvrAssembler/Include\tn2313def.inc'
                 
                 ;------------ASM Программа декодирования скан кодов АТ клавиатуры в ключи управления игровой платой----------------
                 
                 ;***** Created: 2011-02-09 12:04 ******* Source: ATtiny2313.xml **********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "tn2313def.inc"
                 ;* Title             : Register/Bit Definitions for the ATtiny2313
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATtiny2313
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _TN2313DEF_INC_
                 #define _TN2313DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATtiny2313
                 #pragma AVRPART ADMIN PART_NAME ATtiny2313
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x91
                 .equ	SIGNATURE_002	= 0x0a
                 
                 #pragma AVRPART CORE CORE_VERSION V2
                 #pragma AVRPART CORE NEW_INSTRUCTIONS lpm rd,z+
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	OCR0B	= 0x3c
                 .equ	GIMSK	= 0x3b
                 .equ	EIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCSR	= 0x37
                 .equ	OCR0A	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	TCCR0B	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	TCCR0A	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	CLKPR	= 0x26
                 .equ	ICR1L	= 0x24
                 .equ	ICR1H	= 0x25
                 .equ	GTCCR	= 0x23
                 .equ	TCCR1C	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	PCMSK	= 0x20
                 .equ	EEAR	= 0x1e
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	GPIOR2	= 0x15
                 .equ	GPIOR1	= 0x14
                 .equ	GPIOR0	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	USIDR	= 0x0f
                 .equ	USISR	= 0x0e
                 .equ	USICR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	UCSRC	= 0x03
                 .equ	UBRRH	= 0x02
                 .equ	DIDR	= 0x01
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	OCIE0A	= 0	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	TOIE0	= 1	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	OCF0A	= 0	; Timer/Counter0 Output Compare Flag 0A
                 .equ	TOV0	= 1	; Timer/Counter0 Overflow Flag
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCR0A_0	= 0	; 
                 .equ	OCR0A_1	= 1	; 
                 .equ	OCR0A_2	= 2	; 
                 .equ	OCR0A_3	= 3	; 
                 .equ	OCR0A_4	= 4	; 
                 .equ	OCR0A_5	= 5	; 
                 .equ	OCR0A_6	= 6	; 
                 .equ	OCR0A_7	= 7	; 
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Match Output B Mode
                 .equ	COM0B1	= 5	; Compare Match Output B Mode
                 .equ	COM0A0	= 6	; Compare Match Output A Mode
                 .equ	COM0A1	= 7	; Compare Match Output A Mode
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	TCCR0	= TCCR0B	; For compatibility
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare B
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	ICIE1	= 3	; Timer/Counter1 Input Capture Interrupt Enable
                 .equ	TICIE	= ICIE1	; For compatibility
                 .equ	OCIE1B	= 5	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 6	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TOIE1	= 7	; Timer/Counter1 Overflow Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	ICF1	= 3	; Input Capture Flag 1
                 .equ	OCF1B	= 5	; Output Compare Flag 1B
                 .equ	OCF1A	= 6	; Output Compare Flag 1A
                 .equ	TOV1	= 7	; Timer/Counter1 Overflow Flag
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	COM1B0	= 4	; Comparet Ouput Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Clock Select bit 0
                 .equ	CS11	= 1	; Clock Select 1 bit 1
                 .equ	CS12	= 2	; Clock Select1 bit 2
                 .equ	WGM12	= 3	; Waveform Generation Mode Bit 2
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode Bit 3
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ	FOC1B	= 6	; Force Output Compare for Channel B
                 .equ	FOC1A	= 7	; Force Output Compare for Channel A
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDTCSR	= WDTCR	; For compatibility
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDTOE	= WDCE	; For compatibility
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GIMSK - General Interrupt Mask Register
                 .equ	PCIE	= 5	; 
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; EIFR - Extended Interrupt Flag Register
                 .equ	GIFR	= EIFR	; For compatibility
                 .equ	PCIF	= 5	; 
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART Transmission Speed
                 .equ	UPE	= 2	; USART Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size Bit 0
                 .equ	UCSZ1	= 2	; Character Size Bit 1
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 
                 .equ	UBRR	= UBRRL	; For compatibility
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; 
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Data Register, Port D
                 .equ	PORTD0	= 0	; 
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; 
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; 
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; 
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; 
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; 
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; 
                 .equ	PD6	= 6	; For compatibility
                 
                 ; DDRD - Data Direction Register, Port D
                 .equ	DDD0	= 0	; 
                 .equ	DDD1	= 1	; 
                 .equ	DDD2	= 2	; 
                 .equ	DDD3	= 3	; 
                 .equ	DDD4	= 4	; 
                 .equ	DDD5	= 5	; 
                 .equ	DDD6	= 6	; 
                 
                 ; PIND - Input Pins, Port D
                 .equ	PIND0	= 0	; 
                 .equ	PIND1	= 1	; 
                 .equ	PIND2	= 2	; 
                 .equ	PIND3	= 3	; 
                 .equ	PIND4	= 4	; 
                 .equ	PIND5	= 5	; 
                 .equ	PIND6	= 6	; 
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEAR - EEPROM Read/Write Access
                 .equ	EEARL	= EEAR	; For compatibility
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access bit 6
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEWE	= EEPE	; For compatibility
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EEMWE	= EEMPE	; For compatibility
                 .equ	EERIE	= 3	; EEProm Ready Interrupt Enable
                 .equ	EEPM0	= 4	; 
                 .equ	EEPM1	= 5	; 
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; SPMCSR - Store Program Memory Control and Status register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	RFLB	= 3	; Read Fuse and Lock Bits
                 .equ	CTPB	= 4	; Clear Temporary Page Buffer
                 
                 ; MCUCR - MCU Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 bit 1
                 .equ	SM0	= 4	; Sleep Mode Select Bit 0
                 .equ	SM	= SM0	; For compatibility
                 .equ	SE	= 5	; Sleep Enable
                 .equ	SM1	= 6	; Sleep Mode Select Bit 1
                 .equ	PUD	= 7	; Pull-up Disable
                 
                 ; CLKPR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                 
                 ; MCUSR - MCU Status register
                 .equ	PORF	= 0	; Power-On Reset Flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; OSCCAL - Oscillator Calibration Register
                 .equ	CAL0	= 0	; Oscillatro Calibration Value Bit 0
                 .equ	CAL1	= 1	; Oscillatro Calibration Value Bit 1
                 .equ	CAL2	= 2	; Oscillatro Calibration Value Bit 2
                 .equ	CAL3	= 3	; Oscillatro Calibration Value Bit 3
                 .equ	CAL4	= 4	; Oscillatro Calibration Value Bit 4
                 .equ	CAL5	= 5	; Oscillatro Calibration Value Bit 5
                 .equ	CAL6	= 6	; Oscillatro Calibration Value Bit 6
                 
                 ; GTCCR - General Timer Counter Control Register
                 .equ	SFIOR	= GTCCR	; For compatibility
                 .equ	PSR10	= 0	; 
                 
                 ; PCMSK - Pin-Change Mask register
                 .equ	PCINT0	= 0	; Pin-Change Interrupt 0
                 .equ	PCINT1	= 1	; Pin-Change Interrupt 1
                 .equ	PCINT2	= 2	; Pin-Change Interrupt 2
                 .equ	PCINT3	= 3	; Pin-Change Interrupt 3
                 .equ	PCINT4	= 4	; Pin-Change Interrupt 4
                 .equ	PCINT5	= 5	; Pin-Change Interrupt 5
                 .equ	PCINT6	= 6	; Pin-Change Interrupt 6
                 .equ	PCINT7	= 7	; Pin-Change Interrupt 7
                 
                 ; GPIOR2 - General Purpose I/O Register 2
                 .equ	GPIOR20	= 0	; General Purpose I/O Register 2 bit 0
                 .equ	GPIOR21	= 1	; General Purpose I/O Register 2 bit 1
                 .equ	GPIOR22	= 2	; General Purpose I/O Register 2 bit 2
                 .equ	GPIOR23	= 3	; General Purpose I/O Register 2 bit 3
                 .equ	GPIOR24	= 4	; General Purpose I/O Register 2 bit 4
                 .equ	GPIOR25	= 5	; General Purpose I/O Register 2 bit 5
                 .equ	GPIOR26	= 6	; General Purpose I/O Register 2 bit 6
                 .equ	GPIOR27	= 7	; General Purpose I/O Register 2 bit 7
                 
                 ; GPIOR1 - General Purpose I/O Register 1
                 .equ	GPIOR10	= 0	; General Purpose I/O Register 1 bit 0
                 .equ	GPIOR11	= 1	; General Purpose I/O Register 1 bit 1
                 .equ	GPIOR12	= 2	; General Purpose I/O Register 1 bit 2
                 .equ	GPIOR13	= 3	; General Purpose I/O Register 1 bit 3
                 .equ	GPIOR14	= 4	; General Purpose I/O Register 1 bit 4
                 .equ	GPIOR15	= 5	; General Purpose I/O Register 1 bit 5
                 .equ	GPIOR16	= 6	; General Purpose I/O Register 1 bit 6
                 .equ	GPIOR17	= 7	; General Purpose I/O Register 1 bit 7
                 
                 ; GPIOR0 - General Purpose I/O Register 0
                 .equ	GPIOR00	= 0	; General Purpose I/O Register 0 bit 0
                 .equ	GPIOR01	= 1	; General Purpose I/O Register 0 bit 1
                 .equ	GPIOR02	= 2	; General Purpose I/O Register 0 bit 2
                 .equ	GPIOR03	= 3	; General Purpose I/O Register 0 bit 3
                 .equ	GPIOR04	= 4	; General Purpose I/O Register 0 bit 4
                 .equ	GPIOR05	= 5	; General Purpose I/O Register 0 bit 5
                 .equ	GPIOR06	= 6	; General Purpose I/O Register 0 bit 6
                 .equ	GPIOR07	= 7	; General Purpose I/O Register 0 bit 7
                 
                 
                 ; ***** USI **************************
                 ; USIDR - USI Data Register
                 .equ	USIDR0	= 0	; USI Data Register bit 0
                 .equ	USIDR1	= 1	; USI Data Register bit 1
                 .equ	USIDR2	= 2	; USI Data Register bit 2
                 .equ	USIDR3	= 3	; USI Data Register bit 3
                 .equ	USIDR4	= 4	; USI Data Register bit 4
                 .equ	USIDR5	= 5	; USI Data Register bit 5
                 .equ	USIDR6	= 6	; USI Data Register bit 6
                 .equ	USIDR7	= 7	; USI Data Register bit 7
                 
                 ; USISR - USI Status Register
                 .equ	USICNT0	= 0	; USI Counter Value Bit 0
                 .equ	USICNT1	= 1	; USI Counter Value Bit 1
                 .equ	USICNT2	= 2	; USI Counter Value Bit 2
                 .equ	USICNT3	= 3	; USI Counter Value Bit 3
                 .equ	USIDC	= 4	; Data Output Collision
                 .equ	USIPF	= 5	; Stop Condition Flag
                 .equ	USIOIF	= 6	; Counter Overflow Interrupt Flag
                 .equ	USISIF	= 7	; Start Condition Interrupt Flag
                 
                 ; USICR - USI Control Register
                 .equ	USITC	= 0	; Toggle Clock Port Pin
                 .equ	USICLK	= 1	; Clock Strobe
                 .equ	USICS0	= 2	; USI Clock Source Select Bit 0
                 .equ	USICS1	= 3	; USI Clock Source Select Bit 1
                 .equ	USIWM0	= 4	; USI Wire Mode Bit 0
                 .equ	USIWM1	= 5	; USI Wire Mode Bit 1
                 .equ	USIOIE	= 6	; Counter Overflow Interrupt Enable
                 .equ	USISIE	= 7	; Start Condition Interrupt Enable
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lockbit
                 .equ	LB2	= 1	; Lockbit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog Timer Always On
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	DWEN	= 6	; debugWIRE Enable
                 .equ	RSTDISBL	= 7	; External reset disable
                 
                 ; EXTENDED fuse bits
                 .equ	SELFPRGEN	= 0	; Self Programming Enable
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x03ff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 128
                 .equ	RAMEND	= 0x00df
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x007f
                 .equ	EEPROMEND	= 0x007f
                 .equ	EEADRBITS	= 7
                 #pragma AVRPART MEMORY PROG_FLASH 2048
                 #pragma AVRPART MEMORY EEPROM 128
                 #pragma AVRPART MEMORY INT_SRAM SIZE 128
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x0
                 .equ	NRWW_STOP_ADDR	= 0x3ff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x0
                 .equ	PAGESIZE	= 16
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                 .equ	ICP1addr	= 0x0003	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0004	; Timer/Counter1 Compare Match A
                 .equ	OC1addr	= 0x0004	; For compatibility
                 .equ	OVF1addr	= 0x0005	; Timer/Counter1 Overflow
                 .equ	OVF0addr	= 0x0006	; Timer/Counter0 Overflow
                 .equ	URXCaddr	= 0x0007	; USART, Rx Complete
                 .equ	URXC0addr	= 0x0007	; For compatibility
                 .equ	UDREaddr	= 0x0008	; USART Data Register Empty
                 .equ	UDRE0addr	= 0x0008	; For compatibility
                 .equ	UTXCaddr	= 0x0009	; USART, Tx Complete
                 .equ	UTXC0addr	= 0x0009	; For compatibility
                 .equ	ACIaddr	= 0x000a	; Analog Comparator
                 .equ	PCIaddr	= 0x000b	; 
                 .equ	OC1Baddr	= 0x000c	; 
                 .equ	OC0Aaddr	= 0x000d	; 
                 .equ	OC0Baddr	= 0x000e	; 
                 .equ	USI_STARTaddr	= 0x000f	; USI Start Condition
                 .equ	USI_OVFaddr	= 0x0010	; USI Overflow
                 .equ	ERDYaddr	= 0x0011	; 
                 .equ	WDTaddr	= 0x0012	; Watchdog Timer Overflow
                 
                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                 
                 #endif  /* _TN2313DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 // Проимпортировано из Atmel Studio 4 в Atmel Studio 6.0.1996 - Service Pack 2. 23 февраля 2018г.
                 // Микроконтроллер Attiny2313
                 // Внешний кварц 16MHz
                 // dat AT клавиатуры подключен на PD3
                 // clk AT клавиатуры подключен на PD2 внешнее прерывание 0 (INT0)
                 // программа считывает коды клавиш по прерыванию от импульсов clk AT клавиатуры (по спаду импульса)
                 // выводы управления платой : клавиши HOLD1 -  HOLD7	  - PB0-PB7 pins 12 - 19
                 //							  импульсы кредитов			  - PD4 pin 8
                 //							  импульс выплаты			  - PD6 pin 11
                 //							  импульс короткой статистики - PD5 pin 9
                 //							  импульс длинной статистики  - PD5 pin 9
                 // UART RXD (PD0 - pin 2), TXD (PD1 - pin 3) подключен к конвертору TTL-RS232, 
                 // поразумевается параллельное соединение нескольких процессоров между собой и к серверу
                 // для начисления/снятия кредитов и входа в длинную статистику. Вход в короткую статистику 
                 // производиться с клавиатуры.
                 // начисление кредитов в соответствии с полученными данными: 
                 // цифра 1 - 10 импульсов
                 // цифра 2 - 20 импульсов
                 // цифра 3 - 30 импульсов
                 // цифра 4 - 40 импульсов
                 // цифра 5 - 50 импульсов
                 // цифра 6 - 1 импульс
                 // цифра 7 - 5 импульс
                 // разработано 27 ноября 2009г.
                 // Snibler
                 ;--------макроасемблер-------------------------------
                 .include "tn2313def.inc"
                 
                 ;***** Created: 2011-02-09 12:04 ******* Source: ATtiny2313.xml **********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "tn2313def.inc"
                 ;* Title             : Register/Bit Definitions for the ATtiny2313
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATtiny2313
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _TN2313DEF_INC_
                 #endif  /* _TN2313DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 .def temp=r16		;
                 .def rab=r17		;контейнер для полученного AT кода, установки регистров конфигурации
                 .def AT_bits=r18	;число прочитанных бит АТ кода
                 .def mark_1=r19		;маркер для отпускания кнопки
                 .def mark_2=r20		;маркер для отпускания кнопки
                 .def counter=r21	;счетчик принятых посылок через UART
                 .def comport=r22	;контейнер для команды или данных полученных через UART
                 .def answer=r23		;ответ серверу
                 .equ CPU		='0';№ клиента 1
                 .equ coinA		='k';команда начисления кредитов
                 .equ stop_coinA	='s';команда останова начисления кредитов
                 .equ payout		='p';команда выплаты
                 .equ longstat	='l';команда длинной статистики
                 .equ kwait_short=700;(1000)	;65535 max numb потух кредит <40(50)ms
                 .equ kwait_long=800	;(2000)	;65535 max numb горит кредит <50(100)ms
                 .equ hold1=0x16		;скан код клавиши 1			включает 0-й вывод порта В
                 .equ hold2=0x1E		;скан код клавиши 2			включает 1-й вывод порта В
                 .equ hold3=0x26		;скан код клавиши 3			включает 2-й вывод порта В
                 .equ hold4=0x25		;скан код клавиши 4			включает 3-й вывод порта В
                 .equ hold5=0x2E		;скан код клавиши 5			включает 4-й вывод порта В
                 .equ hold6=0x29		;скан код клавиши Space		включает 5-й вывод порта В
                 .equ hold7=0x11		;скан код клавиши Alt(L)	включает 6-й вывод порта В
                 .equ hold8=0x12		;скан код клавиши Shift(L)	включает 7-й вывод порта В
                 .equ release=0xF0	;скан код отпускания клавиши выключает все выводы порта В
                 .equ stat1=0x1B		;скан код клавиши S			записывает 1-й код доступа к статистике
                 .equ stat2=0x2C		;скан код клавиши T			записывает 2-й код доступа к статистике
                 .equ stat3=0x5A		;скан код клавиши ENTER		подает импульс на 5-й вывод порта D (открытие статистики)
                 ;-----------Начало програмного кода-------------------------------------------------
                 .cseg						;выбор сегмента програмного кода
                 .org 0x0000					;установка текущего адреса на 0
                 ;--------Переопределение векторов прерываний-----------
                 start:	
000000 c012      	rjmp init			;Переход на начало программы
000001 c089      	rjmp read_AT_code	;INT0  Внешнее прерывание 0
000002 9518      	reti				;INT1  Внешнее прерывание 1
000003 9518      	reti				;ICP1  Таймер/счетчик 1, захват
000004 9518      	reti 				;OC1A  Таймер/счетчик 1, совпадение, канал А
000005 9518      	reti 				;OVF1  Таймер/счетчик 1, прерывание по переполнению
000006 9518      	reti				;OVF0  Таймер/счетчик 0, прерывание по переполнению
000007 c0a0      	rjmp UART_comand	;URXC0 Прерывание UART прием завершен
000008 9518      	reti				;UDRE0 Прерывание UART регистр данных пуст
000009 9518      	reti				;UTXC0 Прерывание UART передача завершена
00000a 9518      	reti				;ACI   Прерывание по компаратору
00000b 9518      	reti 				;PCINT Прерывание по изменению на любом контакте
00000c 9518      	reti				;OC1B  Таймер/счетчик 1. Совпадение, канал В
00000d 9518      	reti				;OC0A  Таймер/счетчик 0. Совпадение, канал А
00000e 9518      	reti				;OC0B  Таймер/счетчик 0. Совпадение, канал В
00000f 9518      	reti				;USI_START  USI готовность к старту
000010 9518      	reti				;USI_OVF    USI переполнение
000011 9518      	reti				;ERDY       EEPROM готовность
000012 9518      	reti				;WDT        Переполнение охранного таймера
                 ;------Модуль инициализации------------------------
                 init: 
                 ;-----Инициализация стека--------------------------
000013 ed0f      	ldi temp, RAMEND	;выбор адреса вершины стека
000014 bf0d      	out SPL, temp		;запись его в регистр стека
                 ;-----Инициализация портов ввода вывода------------
000015 ef0f      	ldi temp, 0b11111111;
000016 bb07      	out DDRB, temp		;data direction register of port B на вход(0) и выход(1)
000017 ef0f      	ldi temp, 0b11111111
000018 bb08      	out PORTB, temp		;включаем подтягивающий резистор
                 
000019 e700      	ldi temp, 0b1110000	;
00001a bb01      	out DDRD, temp		;порт D частично на вход и выход
00001b e70f      	ldi temp, 0b1111111
00001c bb02      	out PORTD, temp		;включаем подтягив. резистор
                 ;---------Инициализация таймера----------------------
00001d e005      	ldi temp, 0x5		;конфигурируем таймер clk i/o /1024
00001e bf03      	out TCCR0B, temp	;для таймера 0 clkI/O/1024 (From prescaler)
00001f bd0e      	out TCCR1B, temp	;для таймера 1 clkI/O/1024 (From prescaler)
                 ;---------Определение маски прерываний---------------
000020 e400      	ldi temp, 0x40
000021 bf0b      	out GIMSK, temp		;Разрешаем Внешнее прерывание 0
                 ;---------Инициализация компаратора-----------------
000022 e800      	ldi temp, 0x80		;выключение компаратора
000023 b908      	out ACSR, temp
000024 e002      	ldi temp, 0x02		;генерим прерывание по спадающей вершине на int0
000025 bf05      	out MCUCR, temp
                 ;--------обнуление рабочих регистров--------
000026 2700      	clr temp
000027 2711      	clr rab
000028 2722      	clr AT_bits
000029 2733      	clr mark_1
00002a 2744      	clr mark_2
00002b 2766      	clr comport
00002c 2777      	clr answer
00002d 2755      	clr counter
00002e 27aa      	clr Xl
00002f 27bb      	clr Xh
                 ;---------Инициализация USART----------------------
                 USART_Init: 
000030 94f8      	cli
000031 e000      	ldi temp, 0x00			;Set baud rate 9600
                 	;ldi rab, 129			;20MHz
000032 e617      	ldi rab, 103			;16MHz
000033 b902      	out UBRRH, temp
000034 b919      	out UBRRL, rab
000035 e011      	ldi rab, (0<<U2X|1<<MPCM)			;Asynchronous Normal mode (U2X = 0), Multi-processor Communication Mode on
000036 b91b      	out UCSRA, rab
000037 e918      	ldi rab, (1<<RXEN|1<<TXEN|1<<RXCIE)	;Enable receiver and transmitter, receive complete interrupt
000038 b91a      	out UCSRB, rab
000039 e016      	ldi rab, (3<<UCSZ0)					; Set frame format: 8data
00003a b913      	out UCSRC, rab
                 ;---------Main programm------------------------------
                 main:
00003b 9478      	sei					;Разрешаем глобальные прерывания
00003c 3010      	cpi rab, 0			;пришел ли байт данных от клавы
00003d f3e9      	breq main
00003e 302a      	cpi AT_bits, 10		;все ли биты прочитаны
00003f f009      	breq received_command
000040 cffa      	rjmp main
                 ;-------Проверка на совпадение полученного АТ кода-----
                 received_command:	
000041 94f8      	cli					;запрещаем глобальные прерывания
000042 3f10      	cpi rab, release	;клавиша отпущена?
000043 f0b9      	breq rel
000044 3116      	cpi rab, hold1		;нажата клавиша hold1
000045 f101      	breq h1
000046 311e      	cpi rab, hold2		;нажата клавиша hold2
000047 f101      	breq h2
000048 3216      	cpi rab, hold3
000049 f101      	breq h3
00004a 3215      	cpi rab, hold4
00004b f101      	breq h4
00004c 321e      	cpi rab, hold5
00004d f101      	breq h5
00004e 3219      	cpi rab, hold6
00004f f101      	breq h6
000050 3111      	cpi rab, hold7
000051 f101      	breq h7
000052 3112      	cpi rab, hold8
000053 f101      	breq h8
000054 311b      	cpi rab, stat1
000055 f101      	breq st1	
000056 321c      	cpi rab, stat2
000057 f101      	breq st2
000058 351a      	cpi rab, stat3
000059 f101      	breq st3
00005a cfe0      	rjmp main	
                 ;------код отпускания клавиши--------
                 rel:	
00005b 27ee      	clr Zl
00005c 27ff      	clr Zh
00005d 3041      	cpi mark_2, 1
00005e f029      	breq m1
00005f e031      	ldi mark_1, 1
000060 ef0f      m2:	ser temp
000061 bb08      	out PORTB, temp		;установка высокого уровня всех выходов порта В
000062 2711      	clr rab
000063 cfd7      	rjmp main
000064 2744      m1:	clr mark_2
000065 cffa      	rjmp m2
                 ;------код нажатия клавиши----------
000066 98c0      h1:	cbi PORTB, 0	;установка низкого уровня 0-го выхода порта
000067 cfd3      	rjmp main
000068 98c1      h2:	cbi PORTB, 1
000069 cfd1      	rjmp main
00006a 98c2      h3:	cbi PORTB, 2
00006b cfcf      	rjmp main
00006c 98c3      h4:	cbi PORTB, 3
00006d cfcd      	rjmp main
00006e 98c4      h5:	cbi PORTB, 4
00006f cfcb      	rjmp main
000070 98c5      h6:	cbi PORTB, 5
000071 cfc9      	rjmp main
000072 98c6      h7:	cbi PORTB, 6
000073 cfc7      	rjmp main
000074 98c7      h8:	cbi PORTB, 7
000075 cfc5      	rjmp main
000076 2fe1      st1:mov Zl, rab	;записываем 1-й ключ доступа к статистике
000077 cfc3      	rjmp main
000078 2ff1      st2:mov Zh, rab	;записываем 2-й ключ доступа к статистике
000079 cfc1      	rjmp main
00007a 31eb      st3:cpi Zl, stat1;проверка первого ключа
00007b f471      	brne m9
00007c 32fc      	cpi Zh, stat2;проверка второго ключа
00007d f461      	brne m9
                 ;-------импульс на короткую статистику с клавиатуры------
00007e 9895      	cbi PORTD, 5			
00007f d0a0      	rcall wait_long			
000080 d09f      	rcall wait_long			
000081 d09e      	rcall wait_long
000082 d09d      	rcall wait_long			
000083 d09c      	rcall wait_long			
000084 d09b      	rcall wait_long
000085 9a95      	sbi PORTD, 5			
000086 27ee      	clr Zl
000087 27ff      	clr Zh
000088 2711      	clr rab
000089 c074      	rjmp success_answer			;успешное выполнение операции статистики
00008a cfb0      m9:rjmp main
                 
                 ;-------Программа обработки прерывания по clk от клавиатуры---------------
                 read_AT_code:
00008b 930f      	push temp
00008c 3020      	cpi AT_bits, 0		;ждем бита "start"
00008d f411      	brne start_bits
00008e 9983      	sbic pind, 3			;пропускаем если сброшен бит данных "start"
00008f c016      	rjmp exit
                 start_bits:	
000090 3020      	cpi AT_bits, 0		;ждем первого бита данных
000091 f051      	breq next_bit
000092 3029      	cpi AT_bits, 9		;если достигли "parity bit"
000093 f041      	breq next_bit
000094 302a      	cpi AT_bits, 10		;если достигли бита "stop"
000095 f478      	brsh full			
000096 b300      	in temp, pind		;читаем данные с выводов порта D
000097 fb03      	bst temp, 3			;сохраняем 3-й бит порта в Т
000098 f917      	bld rab, 7			;загружаем бит из Т в старший бит регистра rab
000099 3028      	cpi AT_bits, 8		;если дошли до последнего бита данных - больше не сдвигаем
00009a f019      	breq last_data_bit
00009b 9516      	lsr rab				;сдвигаем биты регистра rab вправо
                 next_bit:	
00009c 9523      	inc AT_bits
00009d c008      	rjmp exit
                 last_data_bit:
00009e 9523      	inc AT_bits
00009f 3031      	cpi mark_1, 1
0000a0 f429      	brne exit
0000a1 ef10      	ldi rab, release
0000a2 e041      	ldi mark_2, 1
0000a3 2733      	clr mark_1
0000a4 c001      	rjmp exit
0000a5 2722      full:clr AT_bits
0000a6 910f      exit:pop temp
0000a7 9518      reti					;возврат из прерывания по clk от клавиатуры
                 
                 ;-------Программа обработки прерывания по UART прием завершен---------------
                 UART_comand:
0000a8 94f8      	cli
0000a9 930f      	push temp
0000aa 931f      	push rab
0000ab 93ff      	push Zh
0000ac 93ef      	push Zl
0000ad b16c      	in comport, UDR			;Читаем данные из буфера UART в контейнер
0000ae 9b58      	sbis UCSRA, 0			;пропустить если включен мультипроцессорный режим
0000af c005      	rjmp command			;если выключен мультипроцессорный режим, перейти к обработке данных
0000b0 3360      	cpi comport, CPU			;проверить выбран ли этот процессор
0000b1 f411      	brne quit				;если не этот проц то выйти из прерывания
0000b2 e010      	ldi rab, (0<<U2X|0<<MPCM);Asynchronous Normal mode (U2X = 0), Multi-processor Communication Mode off
0000b3 b91b      	out UCSRA, rab
0000b4 c054      quit:rjmp stop				;выйти из прерывания
                 command:
0000b5 3760      	cpi comport, payout		;пришла комманда выплаты?
0000b6 f1d1      	breq pay_out
0000b7 366c      	cpi comport, longstat	;пришла комманда длинной статистики?
0000b8 f1f9      	breq long_stat
0000b9 366b      	cpi comport, coinA		;пришла комманда начисления кредитов?
0000ba f059      	breq credit_count
0000bb 3763      	cpi comport, stop_coinA	;пришла комманда закончить начисление кредитов?
0000bc f149      	breq credit				;начисление кредитов
0000bd 3051      	cpi counter, 1			;если это не команда проверяем на цифру
0000be f408      	brsh check1
0000bf c049      	rjmp stop				;выйти из прерывания
                 check1:
0000c0 336a      	cpi comport, 58			;если цифра <= 9 проверяем дальше
0000c1 f008      	brlo check2
0000c2 c046      	rjmp stop				;выйти из прерывания
                 check2:
0000c3 3360      	cpi comport, 48			;если цифра >= 0 переходим к подсчету кредитов
0000c4 f408      	brsh credit_count
0000c5 c043      	rjmp stop				;выйти из прерывания
                 credit_count:
0000c6 9553      	inc counter
0000c7 5360      	subi comport, 48			;вычтем ASCII "0"
0000c8 3051      	cpi counter, 1			;еще не цифра если тут впервые
0000c9 f1f9      	breq stop				;выйти из прерывания
0000ca 3061      	cpi comport, 1			
0000cb f411      	brne m3
0000cc 961a      	adiw X, 10				;добавляем 10 кредитов
0000cd c03b      	rjmp stop				;выйти из прерывания
0000ce 3062      m3:cpi comport, 2
0000cf f411      	brne m4
0000d0 9654      	adiw X, 20				;добавляем 20 кредитов
0000d1 c037      	rjmp stop				;выйти из прерывания
0000d2 3063      m4:cpi comport, 3
0000d3 f411      	brne m5
0000d4 965e      	adiw X, 30				;добавляем 30 кредитов
0000d5 c033      	rjmp stop				;выйти из прерывания
0000d6 3064      m5:cpi comport, 4
0000d7 f411      	brne m6
0000d8 9698      	adiw X, 40				;добавляем 40 кредитов
0000d9 c02f      	rjmp stop				;выйти из прерывания
0000da 3065      m6:cpi comport, 5
0000db f411      	brne m7
0000dc 96d2      	adiw X, 50				;добавляем 50 кредитов
0000dd c02b      	rjmp stop				;выйти из прерывания
0000de 3066      m7:cpi comport, 6
0000df f411      	brne m8
0000e0 9611      	adiw X, 1				;добавляем 1 кредит
0000e1 c027      	rjmp stop				;выйти из прерывания
0000e2 3067      m8:cpi comport, 7
0000e3 f529      	brne stop
0000e4 9615      	adiw X, 5				;добавляем 5 кредитов
0000e5 c023      	rjmp stop				;выйти из прерывания
                 ;-------подсчет кредитов окончен переходим к их зачислению---------
                 credit:
0000e6 2755      	clr counter
0000e7 30b0      	cpi Xh, 0
0000e8 f411      	brne start_imp_credit
0000e9 30a0      	cpi Xl, 0
0000ea f099      	breq success_answer	;успешное выполнение операции набивки кредита
                 start_imp_credit:
0000eb 9894      	cbi PORTD, 4			;формирование импульса 
0000ec d033      	rcall wait_long		;кредита
0000ed 9a94      	sbi PORTD, 4			;
0000ee d027      	rcall wait_short	;
0000ef 9711      	sbiw X, 1			;вычесть из слова 1 (кредит-1)
0000f0 cff5      	rjmp credit
                 pay_out:
0000f1 9896      	cbi PORTD, 6
0000f2 d02d      	rcall wait_long		;импульс на
0000f3 d02c      	rcall wait_long		;выплату
0000f4 d02b      	rcall wait_long		;
0000f5 d02a      	rcall wait_long		;
0000f6 9a96      	sbi PORTD, 6
0000f7 c006      	rjmp success_answer	;успешное выполнение операции выплаты
                 long_stat:
0000f8 9895      	cbi PORTD, 5			
0000f9 d026      	rcall wait_long		;импульс на
0000fa d025      	rcall wait_long		;статистику
0000fb 9a95      	sbi PORTD, 5			
0000fc 27ee      	clr Zl
0000fd 27ff      	clr Zh
                 ;---------успешное выполнение команды полученной по UART--------------
                 success_answer:
0000fe e011      	ldi rab, (0<<U2X|1<<MPCM);Asynchronous Normal mode (U2X = 0), Multi-processor Communication Mode on
0000ff b91b      	out UCSRA, rab
000100 e2e8      	ldi ZL, low(ok*2)		;вычисляем адрес где хранится
000101 e0f2      	ldi ZH, high(ok*2)		;начало ok записи
                 next:
000102 91c5      	lpm YL, Z+				;Извлекаем адреса из таблицы
000103 91d4      	lpm YH, Z				;и помещаем в Y
000104 9174      	lpm answer, Z			;Извлекаем код из таблицы
000105 317d      	cpi answer, 29			;если равен 29(пробел) заканчиваем передачу
000106 f011      	breq stop
000107 d008      	rcall USART_Transmit	;передача
000108 cff9      	rjmp next
                 stop:
000109 2766      	clr comport
00010a 2777      	clr answer
00010b 91ef      	pop Zl
00010c 91ff      	pop Zh
00010d 911f      	pop rab
00010e 910f      	pop temp
00010f 9518      	reti					;возврат из прерывания по UART прием завершен
                 ;---------------------------------------------------------------------------
                 USART_Transmit:
000110 9b5d      	sbis UCSRA, UDRE		; Wait for empty transmit buffer
000111 cffe      	rjmp USART_Transmit
000112 b97c      	out UDR, answer			; Put data (rab) into buffer, sends the data
000113 9508      	ret
                 ;---------------------------------------------------------------------------
                 ;-----массив байтовых данных--------------
000114 6f00
000115 1d6b      ok: .db 0,'o','k',29		;ok
                 
                 ;-----------Задержка короткая-------------
                 wait_short:	
000116 e000      	ldi temp, 0
000117 bd0d      	out TCNT1H, temp
000118 bd0c      	out TCNT1L, temp
000119 b50c      wt1:in temp, TCNT1L
00011a 3b0c      	cpi temp, low(kwait_short)
00011b f3e8      	brlo wt1
00011c b50d      	in temp, TCNT1H
00011d 3002      	cpi temp, high(kwait_short)
00011e f3d0      	brlo wt1
00011f 9508      	ret
                 ;---------Задержка длинная---------------
                 wait_long:
000120 e000      	ldi temp, 0
000121 bd0d      	out TCNT1H, temp
000122 bd0c      	out TCNT1L, temp
000123 b50c      wt2:in temp, TCNT1L
000124 3200      	cpi temp, low(kwait_long)
000125 f3e8      	brlo wt2
000126 b50d      	in temp, TCNT1H
000127 3003      	cpi temp, high(kwait_long)
000128 f3d0      	brlo wt2


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATtiny2313" register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  44 r17:  35 r18:  10 r19:   4 r20:   4 r21:   5 r22:  18 r23:   5 
r24:   0 r25:   0 r26:   2 r27:   2 r28:   1 r29:   1 r30:   8 r31:   8 
x  :   8 y  :   0 z  :   3 
Registers used: 16 out of 35 (45.7%)

"ATtiny2313" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   7 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   1 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  25 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 brlt  :   0 brmi  :   0 
brne  :  13 brpl  :   0 brsh  :   3 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   1 cbi   :  12 cbr   :   0 clc   :   0 
clh   :   0 cli   :   3 cln   :   0 clr   :  24 cls   :   0 clt   :   0 
clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 cpi   :  46 
cpse  :   0 dec   :   0 eor   :   0 icall :   0 ijmp  :   0 in    :   6 
inc   :   3 ld    :   0 ldd   :   0 ldi   :  23 lds   :   0 lpm   :   5 
lsl   :   0 lsr   :   1 mov   :   2 movw  :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   0 out   :  23 pop   :   5 push  :   5 rcall :  15 
ret   :   3 reti  :  18 rjmp  :  38 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :   4 sbic  :   1 sbis  :   2 sbiw  :   1 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   1 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :   0 std   :   0 sts   :   0 sub   :   0 subi  :   1 
swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 31 out of 105 (29.5%)

"ATtiny2313" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000254    592      4    596    2048  29.1%
[.dseg] 0x000060 0x000060      0      0      0     128   0.0%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 0 warnings
